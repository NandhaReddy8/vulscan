{
    "summary": {
        "Informational": 3,
        "Low": 4,
        "Medium": 6
    },
    "vulnerabilities_by_type": [
        {
            "risk": "Medium",
            "alert_type": "CSP: Failure to Define Directive with No Fallback (1)",
            "alert_tags": "CWE-693, OWASP 2021 A15",
            "parameter": "content-security-policy",
            "evidence": "upgrade-insecure-requests",
            "description": "The Content Security Policy fails to define one of the directives that has no fallback. Missing/excluding them is the same as allowing anything.",
            "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
            "count": 26,
            "affected_urls": [
                "https://moxiehawk.com/robots.txt",
                "https://moxiehawk.com",
                "https://moxiehawk.com/",
                "...and 23 more"
            ]
        },
        {
            "risk": "Medium",
            "alert_type": "Missing Anti-clickjacking Header (1)",
            "alert_tags": "CWE-1021, OWASP 2021 A15",
            "parameter": "x-frame-options",
            "evidence": "",
            "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
            "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
            "count": 24,
            "affected_urls": [
                "https://moxiehawk.com/",
                "https://moxiehawk.com/index.php",
                "https://moxiehawk.com",
                "...and 21 more"
            ]
        },
        {
            "risk": "Informational",
            "alert_type": "Re-examine Cache-control Directives (1)",
            "alert_tags": "CWE-525, OWASP 2021 A13",
            "parameter": "cache-control",
            "evidence": "",
            "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
            "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
            "count": 25,
            "affected_urls": [
                "https://moxiehawk.com/sitemap.xml",
                "https://moxiehawk.com/",
                "https://moxiehawk.com/index.php",
                "...and 22 more"
            ]
        },
        {
            "risk": "Low",
            "alert_type": "Strict-Transport-Security Header Not Set (1)",
            "alert_tags": "CWE-319, OWASP 2021 A15",
            "parameter": "",
            "evidence": "",
            "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
            "count": 113,
            "affected_urls": [
                "https://moxiehawk.com/assets/css/nice-select.css",
                "https://moxiehawk.com/assets/css/meanmenu.css",
                "https://moxiehawk.com/assets/css/owl.carousel.min.css",
                "...and 110 more"
            ]
        },
        {
            "risk": "Informational",
            "alert_type": "Information Disclosure - Suspicious Comments (1)",
            "alert_tags": "CWE-615, OWASP 2021 A13",
            "parameter": "",
            "evidence": "Select",
            "description": "The response appears to contain suspicious comments which may help an attacker.",
            "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
            "count": 29,
            "affected_urls": [
                "https://moxiehawk.com/assets/js/jquery.nice-select.min.js",
                "https://moxiehawk.com/assets/js/owl.carousel.js",
                "https://moxiehawk.com/",
                "...and 26 more"
            ]
        },
        {
            "risk": "Medium",
            "alert_type": "CSP: style-src unsafe-inline (1)",
            "alert_tags": "CWE-693, OWASP 2021 A15",
            "parameter": "content-security-policy",
            "evidence": "upgrade-insecure-requests",
            "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
            "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
            "count": 26,
            "affected_urls": [
                "https://moxiehawk.com/robots.txt",
                "https://moxiehawk.com/",
                "https://moxiehawk.com",
                "...and 23 more"
            ]
        },
        {
            "risk": "Low",
            "alert_type": "X-Content-Type-Options Header Missing (1)",
            "alert_tags": "CWE-693, OWASP 2021 A15",
            "parameter": "x-content-type-options",
            "evidence": "",
            "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
            "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
            "count": 107,
            "affected_urls": [
                "https://moxiehawk.com/assets/css/meanmenu.css",
                "https://moxiehawk.com/assets/css/nice-select.css",
                "https://moxiehawk.com/assets/css/owl.carousel.min.css",
                "...and 104 more"
            ]
        },
        {
            "risk": "Informational",
            "alert_type": "Modern Web Application (1)",
            "alert_tags": "CWE--1",
            "parameter": "",
            "evidence": "<script>\n        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n        })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\n        ga('create', 'UA-26575989-46', 'auto');\n        ga('send', 'pageview');\n\n    </script>",
            "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
            "solution": "This is an informational alert and so no changes are required.",
            "count": 11,
            "affected_urls": [
                "https://moxiehawk.com/robots.txt",
                "https://moxiehawk.com/",
                "https://moxiehawk.com",
                "...and 8 more"
            ]
        },
        {
            "risk": "Low",
            "alert_type": "Cross-Domain JavaScript Source File Inclusion (1)",
            "alert_tags": "CWE-829, OWASP 2021 A15",
            "parameter": "https://www.google.com/recaptcha/api.js?render=6LdU4Q4aAAAAAMF3ZVtqsfoamhdMk2xM7P6RAbJR",
            "evidence": "<script src=\"https://www.google.com/recaptcha/api.js?render=6LdU4Q4aAAAAAMF3ZVtqsfoamhdMk2xM7P6RAbJR\"></script>",
            "description": "The page includes one or more script files from a third-party domain.",
            "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
            "count": 24,
            "affected_urls": [
                "https://moxiehawk.com/",
                "https://moxiehawk.com/index.php",
                "https://moxiehawk.com",
                "...and 21 more"
            ]
        },
        {
            "risk": "Low",
            "alert_type": "Server Leaks Information via \"X-Powered-By\" HTTP Response Header Field(s) (1)",
            "alert_tags": "CWE-497, OWASP 2021 A13",
            "parameter": "",
            "evidence": "x-powered-by: PHP/7.4.33",
            "description": "The web/application server is leaking information via one or more \"X-Powered-By\" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress \"X-Powered-By\" headers.",
            "count": 24,
            "affected_urls": [
                "https://moxiehawk.com/service.php",
                "https://moxiehawk.com/",
                "https://moxiehawk.com/index.php",
                "...and 21 more"
            ]
        },
        {
            "risk": "Medium",
            "alert_type": "Content Security Policy (CSP) Header Not Set (1)",
            "alert_tags": "CWE-693, OWASP 2021 A15",
            "parameter": "",
            "evidence": "",
            "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
            "count": 4,
            "affected_urls": [
                "https://moxiehawk.com/apptest.app",
                "https://moxiehawk.com/assets/img/home-six/banner/banner-img.png",
                "https://moxiehawk.com/privacy-policy.html",
                "...and 1 more"
            ]
        },
        {
            "risk": "Medium",
            "alert_type": "Absence of Anti-CSRF Tokens (1)",
            "alert_tags": "CWE-352, OWASP 2021 A09",
            "parameter": "",
            "evidence": "<form id=\"myForm\"  method=\"POST\">",
            "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
            "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.",
            "count": 1,
            "affected_urls": [
                "https://moxiehawk.com/contact.php"
            ]
        },
        {
            "risk": "Medium",
            "alert_type": "Vulnerable JS Library (1)",
            "alert_tags": "CWE-1395",
            "parameter": "",
            "evidence": "* Bootstrap v4.5.2",
            "description": "The identified library appears to be vulnerable.",
            "solution": "Upgrade to the latest version of the affected library.",
            "count": 1,
            "affected_urls": [
                "https://moxiehawk.com/assets/js/bootstrap.min.js"
            ]
        }
    ]
}