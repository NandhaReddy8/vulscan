{
    "summary": {
        "Informational": 8,
        "Low": 6,
        "Medium": 5
    },
    "vulnerabilities_by_type": [
        {
            "risk": "Medium",
            "alert_type": "Missing Anti-clickjacking Header (1)",
            "alert_tags": "CWE-1021, OWASP 2021 A15",
            "parameter": "x-frame-options",
            "evidence": "",
            "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
            "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
            "count": 117,
            "affected_urls": [
                "https://virtuestech.com/",
                "https://virtuestech.com/?liquid-header=vst-main-header",
                "https://virtuestech.com/?liquid-mega-menu=cs-menu",
                "...and 114 more"
            ]
        },
        {
            "risk": "Informational",
            "alert_type": "Re-examine Cache-control Directives (1)",
            "alert_tags": "CWE-525, OWASP 2021 A13",
            "parameter": "cache-control",
            "evidence": "",
            "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
            "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
            "count": 313,
            "affected_urls": [
                "https://virtuestech.com/",
                "https://virtuestech.com/robots.txt",
                "https://virtuestech.com/wp-login.php?reauth=1&redirect_to=https%3A%2F%2Fvirtuestech.com%2Fwp-admin%2F",
                "...and 310 more"
            ]
        },
        {
            "risk": "Medium",
            "alert_type": "CSP: style-src unsafe-inline (1)",
            "alert_tags": "CWE-693, OWASP 2021 A15",
            "parameter": "content-security-policy",
            "evidence": "upgrade-insecure-requests",
            "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
            "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
            "count": 200,
            "affected_urls": [
                "https://virtuestech.com/",
                "https://virtuestech.com/wp-admin/admin-ajax.php",
                "https://virtuestech.com/wp-admin/",
                "...and 197 more"
            ]
        },
        {
            "risk": "Medium",
            "alert_type": "Absence of Anti-CSRF Tokens (1)",
            "alert_tags": "CWE-352, OWASP 2021 A09",
            "parameter": "",
            "evidence": "<form action=\"/ai-driven-test-automation-2/#wpcf7-f15142-p20009-o1\" method=\"post\" class=\"wpcf7-form invalid\" aria-label=\"Contact form\" novalidate=\"novalidate\" data-status=\"invalid\">",
            "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
            "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.",
            "count": 38,
            "affected_urls": [
                "https://virtuestech.com/",
                "https://virtuestech.com/wp-login.php?reauth=1&redirect_to=https%3A%2F%2Fvirtuestech.com%2Fwp-admin%2F",
                "https://virtuestech.com",
                "...and 35 more"
            ]
        },
        {
            "risk": "Informational",
            "alert_type": "Information Disclosure - Suspicious Comments (1)",
            "alert_tags": "CWE-615, OWASP 2021 A13",
            "parameter": "",
            "evidence": "User",
            "description": "The response appears to contain suspicious comments which may help an attacker.",
            "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
            "count": 30,
            "affected_urls": [
                "https://virtuestech.com/",
                "https://virtuestech.com/wp-login.php?reauth=1&redirect_to=https%3A%2F%2Fvirtuestech.com%2Fwp-admin%2F",
                "https://virtuestech.com/importance-of-performance-testing-and-monitoring/",
                "...and 27 more"
            ]
        },
        {
            "risk": "Informational",
            "alert_type": "Modern Web Application (1)",
            "alert_tags": "CWE--1",
            "parameter": "",
            "evidence": "<a\n\t\t\t\thref=\"#\"class=\"elementor-button btn btn-naked btn-icon-left btn-has-label\"\t\t\t>\n\t\t\t\t\t\t\t\t\t<span data-text=\"+91 733 746 2335\" class=\"btn-txt\">\n\t\t\t\t\t\t+91 733 746 2335\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"btn-icon\">\n\t\t\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"19\" viewBox=\"0 0 18 19\" fill=\"none\"><g clip-path=\"url(#clip0_2639_571)\"><path d=\"M3.75 3.5H6.75L8.25 7.25L6.375 8.375C7.17822 10.0036 8.49635 11.3218 10.125 12.125L11.25 10.25L15 11.75V14.75C15 15.1478 14.842 15.5294 14.5607 15.8107C14.2794 16.092 13.8978 16.25 13.5 16.25C10.5744 16.0722 7.81512 14.8299 5.74262 12.7574C3.67013 10.6849 2.42779 7.92555 2.25 5C2.25 4.60218 2.40804 4.22064 2.68934 3.93934C2.97064 3.65804 3.35218 3.5 3.75 3.5Z\" stroke=\"#292929\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M11.25 5.75C11.6478 5.75 12.0294 5.90804 12.3107 6.18934C12.592 6.47064 12.75 6.85218 12.75 7.25\" stroke=\"#292929\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M11.25 2.75C12.4435 2.75 13.5881 3.22411 14.432 4.06802C15.2759 4.91193 15.75 6.05653 15.75 7.25\" stroke=\"#292929\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></g><defs><clipPath id=\"clip0_2639_571\"><rect width=\"18\" height=\"18\" fill=\"white\" transform=\"translate(0 0.5)\"></rect></clipPath></defs></svg>\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</a>",
            "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
            "solution": "This is an informational alert and so no changes are required.",
            "count": 81,
            "affected_urls": [
                "https://virtuestech.com/",
                "https://virtuestech.com/?liquid-footer=vst-main-footer",
                "https://virtuestech.com/?liquid-mega-menu=cs-menu",
                "...and 78 more"
            ]
        },
        {
            "risk": "Low",
            "alert_type": "Strict-Transport-Security Header Not Set (1)",
            "alert_tags": "CWE-319, OWASP 2021 A15",
            "parameter": "",
            "evidence": "",
            "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
            "count": 664,
            "affected_urls": [
                "https://virtuestech.com/",
                "https://virtuestech.com/sitemap_index.xml",
                "https://virtuestech.com/liquid-mega-menu-sitemap.xml",
                "...and 661 more"
            ]
        },
        {
            "risk": "Low",
            "alert_type": "Timestamp Disclosure - Unix (1)",
            "alert_tags": "CWE-497, OWASP 2021 A13",
            "parameter": "",
            "evidence": "1743442410",
            "description": "A timestamp was disclosed by the application/web server. - Unix",
            "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
            "count": 90,
            "affected_urls": [
                "https://virtuestech.com/",
                "https://virtuestech.com/?liquid-footer=vst-main-footer",
                "https://virtuestech.com/?liquid-mega-menu=cs-menu",
                "...and 87 more"
            ]
        },
        {
            "risk": "Low",
            "alert_type": "X-Content-Type-Options Header Missing (1)",
            "alert_tags": "CWE-693, OWASP 2021 A15",
            "parameter": "x-content-type-options",
            "evidence": "",
            "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
            "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
            "count": 471,
            "affected_urls": [
                "https://virtuestech.com/",
                "https://virtuestech.com/liquid-mega-menu-sitemap.xml",
                "https://virtuestech.com/liquid-header-sitemap.xml",
                "...and 468 more"
            ]
        },
        {
            "risk": "Low",
            "alert_type": "Server Leaks Information via \"X-Powered-By\" HTTP Response Header Field(s) (1)",
            "alert_tags": "CWE-497, OWASP 2021 A13",
            "parameter": "",
            "evidence": "x-powered-by: PHP/8.2.27",
            "description": "The web/application server is leaking information via one or more \"X-Powered-By\" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress \"X-Powered-By\" headers.",
            "count": 401,
            "affected_urls": [
                "https://virtuestech.com/",
                "https://virtuestech.com/liquid-header-sitemap.xml",
                "https://virtuestech.com/liquid-mega-menu-sitemap.xml",
                "...and 398 more"
            ]
        },
        {
            "risk": "Informational",
            "alert_type": "Retrieved from Cache (1)",
            "alert_tags": "CWE--1",
            "parameter": "",
            "evidence": "Age: 177442",
            "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.",
            "solution": "Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
            "count": 261,
            "affected_urls": [
                "https://virtuestech.com/wp-content/uploads/2024/11/VSoft-Logo-300x102.png",
                "https://virtuestech.com/wp-content/uploads/2024/11/rollick-logo.png",
                "https://virtuestech.com/wp-content/uploads/2024/11/the-credit-pros--300x34.png",
                "...and 258 more"
            ]
        },
        {
            "risk": "Informational",
            "alert_type": "Session Management Response Identified (1)",
            "alert_tags": "CWE--1",
            "parameter": "wordpress_test_cookie",
            "evidence": "WP%20Cookie%20check",
            "description": "The given response has been identified as containing a session management token. The 'Other Info' field contains a set of header tokens that can be used in the Header Based Session Management Method. If the request is in a context which has a Session Management Method set to \"Auto-Detect\" then this rule will change the session management to use the tokens identified.",
            "solution": "This is an informational alert rather than a vulnerability and so there is nothing to fix.",
            "count": 4,
            "affected_urls": [
                "https://virtuestech.com/wp-login.php?reauth=1&redirect_to=https%3A%2F%2Fvirtuestech.com%2Fwp-admin%2F",
                "https://virtuestech.com/wp-login.php?action=lostpassword",
                "https://virtuestech.com/wp-login.php",
                "...and 1 more"
            ]
        },
        {
            "risk": "Low",
            "alert_type": "Cookie No HttpOnly Flag (1)",
            "alert_tags": "CWE-1004, OWASP 2021 A13",
            "parameter": "wordpress_test_cookie",
            "evidence": "set-cookie: wordpress_test_cookie",
            "description": "A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.",
            "solution": "Ensure that the HttpOnly flag is set for all cookies.",
            "count": 4,
            "affected_urls": [
                "https://virtuestech.com/wp-login.php?reauth=1&redirect_to=https%3A%2F%2Fvirtuestech.com%2Fwp-admin%2F",
                "https://virtuestech.com/wp-login.php?action=lostpassword",
                "https://virtuestech.com/wp-login.php",
                "...and 1 more"
            ]
        },
        {
            "risk": "Low",
            "alert_type": "Cookie without SameSite Attribute (1)",
            "alert_tags": "CWE-1275, OWASP 2021 A13",
            "parameter": "wordpress_test_cookie",
            "evidence": "set-cookie: wordpress_test_cookie",
            "description": "A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.",
            "solution": "Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.",
            "count": 4,
            "affected_urls": [
                "https://virtuestech.com/wp-login.php?reauth=1&redirect_to=https%3A%2F%2Fvirtuestech.com%2Fwp-admin%2F",
                "https://virtuestech.com/wp-login.php?action=lostpassword",
                "https://virtuestech.com/wp-login.php",
                "...and 1 more"
            ]
        },
        {
            "risk": "Informational",
            "alert_type": "User Controllable HTML Element Attribute (Potential XSS) (1)",
            "alert_tags": "CWE-20, OWASP 2021 A20",
            "parameter": "_wpcf7_unit_tag",
            "evidence": "",
            "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.",
            "solution": "Validate all input and sanitize output it before writing to any HTML attributes.",
            "count": 47,
            "affected_urls": [
                "https://virtuestech.com/wp-login.php?reauth=1&redirect_to=https%3A%2F%2Fvirtuestech.com%2Fwp-admin%2F",
                "https://virtuestech.com/?liquid-footer=vst-main-footer",
                "https://virtuestech.com/?liquid-mega-menu=cs-menu",
                "...and 44 more"
            ]
        },
        {
            "risk": "Medium",
            "alert_type": "Content Security Policy (CSP) Header Not Set (1)",
            "alert_tags": "CWE-693, OWASP 2021 A15",
            "parameter": "",
            "evidence": "",
            "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
            "count": 2,
            "affected_urls": [
                "https://virtuestech.com/xmlrpc.php",
                "https://virtuestech.com/xmlrpc.php?rsd"
            ]
        },
        {
            "risk": "Informational",
            "alert_type": "Charset Mismatch  (1)",
            "alert_tags": "CWE-436, OWASP 2021 A15",
            "parameter": "",
            "evidence": "",
            "description": "This check identifies responses where the HTTP Content-Type header declares a charset different from the charset defined by the body of the HTML or XML. When there's a charset mismatch between the HTTP header and content body Web browsers can be forced into an undesirable content-sniffing mode to determine the content's correct character set.\n\nAn attacker could manipulate content on the page to be interpreted in an encoding of their choice. For example, if an attacker can control content at the beginning of the page, they could inject script using UTF-7 encoded text and manipulate some browsers into interpreting that text.",
            "solution": "Force UTF-8 for all text content in both the HTTP header and meta tags in HTML or encoding declarations in XML.",
            "count": 59,
            "affected_urls": [
                "https://virtuestech.com/wp-json/oembed/1.0/embed?format=xml&url=https%3A%2F%2Fvirtuestech.com%2F%3Fliquid-mega-menu%3Dcs-menu",
                "https://virtuestech.com/wp-json/oembed/1.0/embed?format=xml&url=https%3A%2F%2Fvirtuestech.com%2F%3Fliquid-header%3Dvst-main-header",
                "https://virtuestech.com/wp-json/oembed/1.0/embed?format=xml&url=https%3A%2F%2Fvirtuestech.com%2F%3Fliquid-footer%3Dvst-main-footer",
                "...and 56 more"
            ]
        },
        {
            "risk": "Medium",
            "alert_type": "Vulnerable JS Library (1)",
            "alert_tags": "CWE-1395",
            "parameter": "",
            "evidence": "/*! jQuery UI - v1.13.1",
            "description": "The identified library appears to be vulnerable.",
            "solution": "Upgrade to the latest version of the affected library.",
            "count": 1,
            "affected_urls": [
                "https://virtuestech.com/wp-content/themes/hub/assets/vendors/jquery-ui/jquery-ui.min.js"
            ]
        },
        {
            "risk": "Informational",
            "alert_type": "Cookie Poisoning (1)",
            "alert_tags": "CWE-565, OWASP 2021 A20",
            "parameter": "url",
            "evidence": "",
            "description": "This check looks at user-supplied input in query string parameters and POST data to identify where cookie parameters might be controlled. This is called a cookie poisoning attack, and becomes exploitable when an attacker can manipulate the cookie in various ways. In some cases this will not be exploitable, however, allowing URL parameters to set cookie values is generally considered a bug.",
            "solution": "Do not allow user input to control cookie names and values. If some query string parameters must be set in cookie values, be sure to filter out semicolon's that can serve as name/value pair delimiters.",
            "count": 1,
            "affected_urls": [
                "https://virtuestech.com/wp-comments-post.php"
            ]
        }
    ]
}