{
    "summary": {
        "Informational": 2,
        "Medium": 2,
        "Low": 2
    },
    "vulnerabilities_by_type": [
        {
            "risk": "Medium",
            "alert_type": "Missing Anti-clickjacking Header (1)",
            "alert_tags": "CWE-1021, OWASP 2021 A15",
            "parameter": "x-frame-options",
            "evidence": "",
            "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
            "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
            "count": 4,
            "affected_urls": [
                "https://thethrone.com/",
                "https://thethrone.com",
                "https://thethrone.com/sitemap.xml",
                "...and 1 more"
            ]
        },
        {
            "risk": "Informational",
            "alert_type": "Re-examine Cache-control Directives (1)",
            "alert_tags": "CWE-525, OWASP 2021 A13",
            "parameter": "cache-control",
            "evidence": "",
            "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
            "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
            "count": 4,
            "affected_urls": [
                "https://thethrone.com/",
                "https://thethrone.com",
                "https://thethrone.com/robots.txt",
                "...and 1 more"
            ]
        },
        {
            "risk": "Medium",
            "alert_type": "Content Security Policy (CSP) Header Not Set (1)",
            "alert_tags": "CWE-693, OWASP 2021 A15",
            "parameter": "",
            "evidence": "",
            "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
            "count": 4,
            "affected_urls": [
                "https://thethrone.com/",
                "https://thethrone.com",
                "https://thethrone.com/robots.txt",
                "...and 1 more"
            ]
        },
        {
            "risk": "Informational",
            "alert_type": "Modern Web Application (1)",
            "alert_tags": "CWE--1",
            "parameter": "",
            "evidence": "<script>window.onload=function(){window.location.href=\"/lander\"}</script>",
            "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
            "solution": "This is an informational alert and so no changes are required.",
            "count": 4,
            "affected_urls": [
                "https://thethrone.com/",
                "https://thethrone.com",
                "https://thethrone.com/robots.txt",
                "...and 1 more"
            ]
        },
        {
            "risk": "Low",
            "alert_type": "Strict-Transport-Security Header Not Set (1)",
            "alert_tags": "CWE-319, OWASP 2021 A15",
            "parameter": "",
            "evidence": "",
            "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
            "count": 4,
            "affected_urls": [
                "https://thethrone.com/",
                "https://thethrone.com",
                "https://thethrone.com/robots.txt",
                "...and 1 more"
            ]
        },
        {
            "risk": "Low",
            "alert_type": "X-Content-Type-Options Header Missing (1)",
            "alert_tags": "CWE-693, OWASP 2021 A15",
            "parameter": "x-content-type-options",
            "evidence": "",
            "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
            "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
            "count": 4,
            "affected_urls": [
                "https://thethrone.com/",
                "https://thethrone.com",
                "https://thethrone.com/robots.txt",
                "...and 1 more"
            ]
        }
    ]
}